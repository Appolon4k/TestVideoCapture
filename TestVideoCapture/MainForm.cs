using System;
using System.Drawing;
using System.Drawing.Imaging;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using DirectShowLib;
using TestVideoCapture.Capture;
using Encoder = System.Drawing.Imaging.Encoder;

namespace TestVideoCapture
{
    public partial class MainForm : Form
    {
        public enum ImageType
        {
            Jpeg,
            Png
        }

        private readonly string _audioDeviceName;
        private readonly PhysicalConnectorType _connectorType;
        private readonly int _height;
        private readonly double _ratio;
        private readonly string _videoDevicePath;
        private readonly int _width;
        private VideoCaptureBase _capture;
        private ControlVideoCommon _controlVideoCommon; //contains videocapture as member

        private bool _isRecording;


        public MainForm()
        {
            InitializeComponent();
            _isRecording = false;

            _videoDevicePath = "SMI";
            _audioDeviceName = "Микрофон";
            _connectorType = PhysicalConnectorType.Video_SVideo;
            _ratio = 720.0/576.0;
            _height = 576;
            _width = 720;

            StartPreview();
        }

        private void buttonStart_Click(object sender, EventArgs e)
        {
            SwitchCapture();
        }

        private void SwitchCapture()
        {
            if (_isRecording == false)
            {
                string filename = GenerateFileNameCapturing();
                StartRecord(filename);
            }
            else
            {
                StartPreview();
            }

            UpdateInterface();
        }

        private void StartRecord(string filename)
        {
            if (_controlVideoCommon != null) _controlVideoCommon.ClearControl();

            _capture = new VideoCaptureAsfRecord(_videoDevicePath, _audioDeviceName, _connectorType, filename, _width,
                                                 _height);

            _controlVideoCommon = new ControlVideoCommon(_capture, panelVideoPreview);

            _isRecording = true;
        }

        private void StartPreview()
        {
            if (_controlVideoCommon != null) _controlVideoCommon.ClearControl();
            _capture = new VideoCaptureScreenshots(_videoDevicePath, _connectorType);
            _controlVideoCommon = new ControlVideoCommon(_capture, panelVideoPreview);

            panelVideo_Resize(this, new EventArgs());

            (_capture as VideoCaptureScreenshots).PictureSavedEvent += PictureSavedEvent;

            _isRecording = false;
        }


        /// <summary>
        ///     Processing saved image - event is generated by capture object, handled here
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="args"></param>
        private void PictureSavedEvent(object sender, VideoCaptureScreenshots.PictureSavedArgs args)
        {
            Image screenshotImage = args.Image;

            using (var snapshotForm = new FormScreenshot(args.Image))
            {
                DialogResult result = snapshotForm.ShowDialog();

                if (result != DialogResult.OK) return;

                ImageType extension = snapshotForm.Extension;
                string fileName = snapshotForm.FileName;

                string filepath = GenerateFilePath(fileName, extension);

                //write file
                Bitmap bmp = args.Image;

                EncoderParameters encoderParameters;
                ImageCodecInfo jpgEncoder;
                ImageCodecInfo pngEncoder;
                SetImageEncoderParams(out encoderParameters, out jpgEncoder, out pngEncoder);

                switch (extension)
                {
                    case ImageType.Jpeg:
                        //saving as jpeg

                        bmp.Save(filepath, jpgEncoder, encoderParameters);
                        break;
                    case ImageType.Png:

                        bmp.Save(filepath, pngEncoder, encoderParameters);
                        break;
                    default:
                        throw new ArgumentOutOfRangeException();
                }
                //add info to database
            }
        }

        private string GenerateFilePath(string fileName, ImageType extension)
        {
            var pathBuilder = new StringBuilder();
            pathBuilder.Append(fileName);

            switch (extension)
            {
                case ImageType.Jpeg:
                    pathBuilder.Append(".jpg");
                    break;
                case ImageType.Png:
                    pathBuilder.Append(".png");
                    break;
                default:
                    throw new ArgumentOutOfRangeException("Extension");
            }
            return pathBuilder.ToString();
        }

        private void SetImageEncoderParams(out EncoderParameters encoderParameters, out ImageCodecInfo jpgEncoder,
                                           out ImageCodecInfo pngEncoder)
        {
            jpgEncoder = GetEncoder(ImageFormat.Jpeg);
            pngEncoder = GetEncoder(ImageFormat.Png);

            Encoder encoder = Encoder.Quality;
            encoderParameters = new EncoderParameters(1);
            var encoderParameter = new EncoderParameter(encoder, 100L);

            encoderParameters.Param[0] = encoderParameter;
        }

        private ImageCodecInfo GetEncoder(ImageFormat format)
        {
            ImageCodecInfo[] codecs = ImageCodecInfo.GetImageDecoders();
            return codecs.FirstOrDefault(codec => codec.FormatID == format.Guid);
        }

        private void panelVideo_Resize(object sender, EventArgs e)
        {
            if (_controlVideoCommon.Capture == null) return;
            _controlVideoCommon.ResizeVideoWindow(_ratio);
        }




        private void UpdateInterface()
        {
            if (_isRecording == true)
            {
                //
                buttonScreenshot.Hide();
                buttonStart.Text = "Stop";
            }
            else
            {
                buttonScreenshot.Show();
                buttonStart.Text = "Record";


            }
        }

        private string GenerateFileNameCapturing()
        {
            return DateTime.Now.ToString("yyyy-MM-dd_HH-mm-ss") + ".wmv";
        }

        private void buttonScreenshot_Click(object sender, EventArgs e)
        {
            var videoCaptureDocumentCamera = _capture as VideoCaptureScreenshots;
            //snapshot is handled by event handler - when event is generated
            if (videoCaptureDocumentCamera != null) videoCaptureDocumentCamera.Snapshot();
        }

        private void panelVideoPreview_Resize(object sender, EventArgs e)
        {
            if (_controlVideoCommon.Capture == null) return;
            _controlVideoCommon.ResizeVideoWindow();
        }
    }
}